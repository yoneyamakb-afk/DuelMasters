#nullable enable
using System;
using System.Linq;
using System.Reflection;

namespace DMRules.Engine;

/// <summary>
/// M3: Official entrypoint for replacement effects.
/// Delegates to an existing engine implementation if discovered, otherwise no-op.
/// </summary>
public static class ReplacementSystem
{
    private static readonly Assembly EngineAsm = typeof(IGameState).Assembly;

    public static IGameState ApplyReplacement(IGameState state, object replacement)
    {
        // Try to find an existing static ApplyReplacement(IGameState, object) in the engine
        var impl = EngineAsm.GetTypes()
            .SelectMany(t => t.GetMethods(BindingFlags.Public | BindingFlags.Static))
            .FirstOrDefault(m =>
            {
                if (m.Name != "ApplyReplacement") return false;
                var ps = m.GetParameters();
                if (ps.Length != 2) return false;
                return typeof(IGameState).IsAssignableFrom(ps[0].ParameterType)
                    && typeof(IGameState).IsAssignableFrom(m.ReturnType);
            });

        if (impl is not null)
        {
            var result = impl.Invoke(null, new object?[] { state, replacement }) as IGameState;
            if (result is not null) return result;
        }

        // Fallback: return state unchanged
        return state;
    }
}
